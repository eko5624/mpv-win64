From 4cdde96d1f122acc312c0abdfe05b3ba1d626d65 Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Fri, 8 Jul 2022 22:12:59 +0800
Subject: [PATCH] loader: cross-compile & static linking hacks

---
 loader/CMakeLists.txt       | 16 ++++++++--------
 loader/loader.h             |  2 ++
 loader/loader.rc            |  4 ++++
 loader/loader_windows.c     |  4 ++++
 loader/vk_loader_platform.h |  3 ++-
 5 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index 3e99612..36e3d51 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -24,7 +24,7 @@ add_library(loader_specific_options INTERFACE)
 target_link_libraries(loader_specific_options INTERFACE loader_common_options Vulkan::Headers)
 target_include_directories(loader_specific_options INTERFACE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/generated ${CMAKE_CURRENT_BINARY_DIR})
 
-if(WIN32)
+if(WIN32 AND NOT MINGW)
     if(MSVC)
         # Use static MSVCRT libraries
         foreach(configuration
@@ -126,7 +126,7 @@ set(ASM_FAILURE_MSG "The build will fall back on building with C code\n")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG}Note that this may be unsafe, as the C code requires tail-call optimizations to remove")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} the stack frame for certain calls. If the compiler does not do this, then unknown device")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} extensions will suffer from a corrupted stack.")
-if(WIN32)
+if(MSVC)
     if(MINGW)
         find_program(JWASM_FOUND jwasm)
         if (JWASM_FOUND)
@@ -215,7 +215,7 @@ else() # i.e.: Linux
     endif()
 endif()
 
-if(WIN32)
+if(MSVC)
     add_library(loader-opt STATIC ${OPT_LOADER_SRCS})
     target_link_libraries(loader-opt PUBLIC loader_specific_options)
     add_dependencies(loader-opt loader_asm_gen_files)
@@ -251,7 +251,7 @@ if(WIN32)
     add_dependencies(vulkan loader_asm_gen_files)
 
 else()
-    if(APPLE AND BUILD_STATIC_LOADER)
+    if(BUILD_STATIC_LOADER)
         add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
         target_compile_definitions(vulkan PRIVATE BUILD_STATIC_LOADER)
     else()
@@ -295,6 +295,7 @@ else()
         # https://forums.developer.apple.com/thread/65963
 
 # cmake-format: off
+        if (NOT BUILD_STATIC_LOADER)
         set_target_properties(vulkan-framework PROPERTIES
             OUTPUT_NAME vulkan
             FRAMEWORK TRUE
@@ -308,6 +309,7 @@ else()
             PUBLIC_HEADER DESTINATION vulkan
             FRAMEWORK DESTINATION loader
         )
+        endif()
 # cmake-format: on
     endif()
 endif()
@@ -324,10 +326,7 @@ endif()
 include(FindPkgConfig QUIET)
 if(PKG_CONFIG_FOUND)
     set(VK_API_VERSION "${LOADER_GENERATED_HEADER_VERSION}")
-    foreach(LIB ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES} ${PLATFORM_LIBS})
-        set(PRIVATE_LIBS "${PRIVATE_LIBS} -l${LIB}")
-    endforeach()
-    if(WIN32)
+    if(WIN32 AND NOT MINGW)
         set(VULKAN_LIB_SUFFIX "-1")
         # Set libdir path as in cmake's FindVulkan.cmake
         # https://github.com/KhronosGroup/Vulkan-Loader/issues/668
@@ -339,6 +338,7 @@ if(PKG_CONFIG_FOUND)
     else()
         set(CMAKE_INSTALL_FULL_LIBDIR_PC ${CMAKE_INSTALL_FULL_LIBDIR})
     endif ()
+    set(PRIVATE_LIBS "${PRIVATE_LIBS} -lshlwapi -lcfgmgr32")
     configure_file("vulkan.pc.in" "vulkan.pc" @ONLY)
     install(FILES "${CMAKE_CURRENT_BINARY_DIR}/vulkan.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 endif()
diff --git a/loader/loader.h b/loader/loader.h
index 3beb8b6..c8a57d6 100644
--- a/loader/loader.h
+++ b/loader/loader.h
@@ -32,7 +32,9 @@
 #include "loader_common.h"
 
 // Declare the once_init variable
+#if defined(_WIN32) && !defined(LOADER_DYNAMIC_LIB)
 LOADER_PLATFORM_THREAD_ONCE_EXTERN_DEFINITION(once_init)
+#endif
 
 static inline VkPhysicalDevice loader_unwrap_physical_device(VkPhysicalDevice physicalDevice) {
     struct loader_physical_device_tramp *phys_dev = (struct loader_physical_device_tramp *)physicalDevice;
diff --git a/loader/loader.rc b/loader/loader.rc
index 996d9c5..90863da 100644
--- a/loader/loader.rc
+++ b/loader/loader.rc
@@ -19,7 +19,11 @@
 // Author: Charles Giessen <charles@lunarg.com>
 //
 
+#ifdef __MINGW64__
+#include <winresrc.h>
+#else // MSVC
 #include "winres.h"
+#endif
 
 // All set through CMake
 #define VER_FILE_VERSION 1, 0, 1111, 2222
diff --git a/loader/loader_windows.c b/loader/loader_windows.c
index 1ad74e9..fb51390 100644
--- a/loader/loader_windows.c
+++ b/loader/loader_windows.c
@@ -47,6 +47,8 @@
 #include <strsafe.h>
 #ifdef __MINGW32__
 #undef strcpy  // fix error with redfined strcpy when building with MinGW-w64
+#define CM_GETIDLIST_FILTER_PRESENT            (0x00000100)
+#define CM_GETIDLIST_FILTER_CLASS              (0x00000200)
 #endif
 #include <dxgi1_6.h>
 #include "adapters.h"
@@ -88,6 +90,7 @@ void windows_initialization(void) {
 #endif
 }
 
+#if defined(LOADER_DYNAMIC_LIB)
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     switch (reason) {
         case DLL_PROCESS_ATTACH:
@@ -104,6 +107,7 @@ BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, LPVOID reserved) {
     }
     return TRUE;
 }
+#endif
 
 bool windows_add_json_entry(const struct loader_instance *inst,
                             char **reg_data,    // list of JSON files
diff --git a/loader/vk_loader_platform.h b/loader/vk_loader_platform.h
index 864eaf4..3613c59 100644
--- a/loader/vk_loader_platform.h
+++ b/loader/vk_loader_platform.h
@@ -65,6 +65,7 @@
 #include <io.h>
 #include <shlwapi.h>
 #include <direct.h>
+#include <pthread.h> // for mingw
 #endif  // defined(_WIN32)
 
 #include "stack_allocation.h"
@@ -203,7 +204,7 @@ static inline bool loader_platform_is_path(const char *path) { return strchr(pat
 // resources allocated by anything allocated by once init. This isn't a problem for static libraries, but it is for dynamic
 // ones. When building a DLL, we use DllMain() instead to allow properly cleaning up resources.
 
-#if defined(__APPLE__) && defined(BUILD_STATIC_LOADER)
+#if defined(BUILD_STATIC_LOADER)
 static inline void loader_platform_thread_once_fn(pthread_once_t *ctl, void (*func)(void)) {
     assert(func != NULL);
     assert(ctl != NULL);
-- 
2.37.0
