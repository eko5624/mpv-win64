From 2a591dbbcd34134ce347315fc67f8802b2a7d4f4 Mon Sep 17 00:00:00 2001
From: shinchiro <shinchiro@users.noreply.github.com>
Date: Sun, 15 Aug 2021 16:54:08 +0800
Subject: [PATCH] loader: cross-compile & static linking hacks

---
 loader/CMakeLists.txt       | 21 +++++++--------------
 1 files changed, 7 insertions(+), 14 deletions(-)

diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
index 4f54c32..58cf722 100644
--- a/loader/CMakeLists.txt
+++ b/loader/CMakeLists.txt
@@ -69,7 +69,7 @@ endif()
 set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG")
 set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG")
 
-if(WIN32)
+if(WIN32 AND NOT MINGW)
     if(MSVC)
     # Use static MSVCRT libraries
     foreach(configuration
@@ -141,7 +141,7 @@ set(ASM_FAILURE_MSG "The build will fall back on building with C code\n")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG}Note that this may be unsafe, as the C code requires tail-call optimizations to remove")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} the stack frame for certain calls. If the compiler does not do this, then unknown device")
 set(ASM_FAILURE_MSG "${ASM_FAILURE_MSG} extensions will suffer from a corrupted stack.")
-if(WIN32)
+if(MSVC)
     if(MINGW)
         find_program(JWASM_FOUND jwasm)
         if (JWASM_FOUND)
@@ -210,7 +210,7 @@ else(UNIX AND NOT APPLE) # i.e.: Linux
     endif()
 endif()
 
-if(WIN32)
+if(MSVC)
     add_library(loader-norm OBJECT ${NORMAL_LOADER_SRCS} dirent_on_windows.c)
     # target_compile_options(loader-norm PUBLIC "$<$<CONFIG:DEBUG>:${LOCAL_C_FLAGS_DBG}>")
     target_compile_options(loader-norm PUBLIC ${MSVC_LOADER_COMPILE_OPTIONS})
@@ -258,11 +258,7 @@ else()
         set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-typedef-redefinition")
     endif()
 
-    if(APPLE AND BUILD_STATIC_LOADER)
-        add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
-    else()
-        add_library(vulkan SHARED ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
-    endif()
+    add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
     add_dependencies(vulkan loader_asm_gen_files)
     # set version based on VK_HEADER_VERSION used to generate the code
     include(generated/loader_generated_header_version.cmake)
@@ -309,6 +305,7 @@ else()
         # https://forums.developer.apple.com/thread/65963
 
 # cmake-format: off
+        if (NOT ENABLE_STATIC_LOADER)
         set_target_properties(vulkan-framework PROPERTIES
             OUTPUT_NAME vulkan
             FRAMEWORK TRUE
@@ -322,6 +319,7 @@ else()
             PUBLIC_HEADER DESTINATION vulkan
             FRAMEWORK DESTINATION loader
         )
+        endif()
 # cmake-format: on
     endif()
 
@@ -334,12 +332,7 @@ endif()
 include(FindPkgConfig QUIET)
 if(PKG_CONFIG_FOUND)
     set(VK_API_VERSION "${VulkanHeaders_VERSION_MAJOR}.${VulkanHeaders_VERSION_MINOR}.${VulkanHeaders_VERSION_PATCH}")
-    foreach(LIB ${CMAKE_CXX_IMPLICIT_LINK_LIBRARIES} ${PLATFORM_LIBS})
-        set(PRIVATE_LIBS "${PRIVATE_LIBS} -l${LIB}")
-    endforeach()
-    if(WIN32)
-        set(VULKAN_LIB_SUFFIX "-1")
-    endif ()
+    set(PRIVATE_LIBS "${PRIVATE_LIBS} -lshlwapi -lcfgmgr32")
     configure_file("vulkan.pc.in" "vulkan.pc" @ONLY)
     install(FILES "${CMAKE_CURRENT_BINARY_DIR}/vulkan.pc" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
 endif()
-- 
2.32.0
